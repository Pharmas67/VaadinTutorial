{
  "version": 3,
  "sources": ["../../@vaadin/react-components/src/Notification.tsx", "../../@vaadin/react-components/src/generated/Notification.ts", "../../@vaadin/react-components/src/renderers/useRenderer.ts", "../../@vaadin/react-components/src/renderers/useSimpleRenderer.ts", "../../@vaadin/react-components/src/renderers/useSimpleOrChildrenRenderer.ts"],
  "sourcesContent": ["export * from \"@vaadin/notification/vaadin-notification.js\";\nimport {\n  type ComponentType,\n  type ForwardedRef,\n  forwardRef,\n  type ForwardRefExoticComponent,\n  type HTMLAttributes,\n  type ReactElement,\n  type ReactNode,\n  type RefAttributes,\n} from 'react';\nimport {\n  Notification as _Notification,\n  NotificationElement,\n  type NotificationProps as _NotificationProps,\n  type ShowOptions,\n} from './generated/Notification.js';\nimport { useSimpleOrChildrenRenderer } from './renderers/useSimpleOrChildrenRenderer.js';\nimport type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';\n\nexport * from './generated/Notification.js';\n\nexport type NotificationReactRendererProps = ReactSimpleRendererProps<NotificationElement>;\n\ntype OmittedNotificationHTMLAttributes = Omit<\n  HTMLAttributes<NotificationElement>,\n  'id' | 'className' | 'dangerouslySetInnerHTML' | 'slot'\n>;\n\nexport type NotificationProps = Partial<\n  Omit<_NotificationProps, 'children' | 'renderer' | keyof OmittedNotificationHTMLAttributes>\n> &\n  Readonly<{\n    children?: ReactNode | ComponentType<NotificationReactRendererProps>;\n    renderer?: ComponentType<NotificationReactRendererProps>;\n  }>;\n\nfunction Notification(\n  { children, ...props }: NotificationProps,\n  ref: ForwardedRef<NotificationElement>,\n): ReactElement | null {\n  const [portals, renderer] = useSimpleOrChildrenRenderer(props.renderer, children);\n\n  return (\n    <_Notification {...props} ref={ref} renderer={renderer}>\n      {portals}\n    </_Notification>\n  );\n}\n\nexport type NotificationFunction = ForwardRefExoticComponent<NotificationProps & RefAttributes<NotificationElement>> & {\n  show(contents: string, options?: ShowOptions): NotificationElement;\n};\n\nconst ForwardedNotification = forwardRef(Notification) as NotificationFunction;\nForwardedNotification.show = NotificationElement.show;\n\nexport { ForwardedNotification as Notification };\n", "import type { EventName } from \"@lit/react\";\nimport { Notification as NotificationElement, type NotificationEventMap as _NotificationEventMap, } from \"@vaadin/notification/vaadin-notification.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { NotificationElement, };\nexport type NotificationEventMap = Readonly<{\n    onOpenedChanged: EventName<_NotificationEventMap[\"opened-changed\"]>;\n}>;\nconst events = { onOpenedChanged: \"opened-changed\" } as NotificationEventMap;\nexport type NotificationProps = WebComponentProps<NotificationElement, NotificationEventMap>;\nexport const Notification = createComponent({\n    elementClass: NotificationElement, events, react: React, tagName: \"vaadin-notification\"\n});\n", "import {\n  type ComponentType,\n  createElement,\n  type PropsWithChildren,\n  type ReactElement,\n  type ReactNode,\n  useCallback,\n  useReducer,\n} from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport type { Slice, WebComponentRenderer } from './renderer.js';\n\nexport type UseRendererResult<W extends WebComponentRenderer> = readonly [\n  portals?: ReadonlyArray<ReactElement | null>,\n  renderer?: W,\n];\n\nconst initialState = new Map();\n\nfunction rendererReducer<W extends WebComponentRenderer>(\n  state: Map<HTMLElement, Slice<Parameters<W>, 1>>,\n  [root, ...args]: Parameters<W>,\n): Map<HTMLElement, Slice<Parameters<W>, 1>> {\n  return new Map(state).set(root, args as Slice<Parameters<W>, 1>);\n}\n\nexport type RendererConfig = {\n  renderSync?: boolean;\n};\n\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  node: ReactNode,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRenderer: ComponentType<P> | null | undefined,\n  convert: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig,\n): UseRendererResult<W>;\nexport function useRenderer<P extends {}, W extends WebComponentRenderer>(\n  reactRendererOrNode: ReactNode | ComponentType<P> | null | undefined,\n  convert?: (props: Slice<Parameters<W>, 1>) => PropsWithChildren<P>,\n  config?: RendererConfig,\n): UseRendererResult<W> {\n  const [map, update] = useReducer<typeof rendererReducer<W>>(rendererReducer, initialState);\n  const renderer = useCallback(\n    ((...args: Parameters<W>) => {\n      if (config?.renderSync) {\n        // The web components may request multiple synchronous renderer calls that\n        // would result in flushSync logging a warning (and actually executing the\n        // overlapping flushSync in microtask timing). Suppress the warning and allow\n        // the resulting asynchronicity.\n        const console = globalThis.console as any;\n        const error = console.error;\n        console.error = (message: string) => {\n          if (message.includes('flushSync')) {\n            return;\n          }\n          error(message);\n        };\n        flushSync(() => update(args));\n        console.error = error;\n      } else {\n        update(args);\n      }\n    }) as W,\n    [],\n  );\n\n  return reactRendererOrNode\n    ? [\n        Array.from(map.entries()).map(([root, args]) =>\n          createPortal(\n            convert\n              ? createElement<P>(reactRendererOrNode as ComponentType<P>, convert(args))\n              : (reactRendererOrNode as ReactNode),\n            root,\n          ),\n        ),\n        renderer,\n      ]\n    : [];\n}\n", "import type { ComponentType, PropsWithChildren } from 'react';\nimport type { Slice } from './renderer.js';\nimport { useRenderer, type RendererConfig, type UseRendererResult } from './useRenderer.js';\n\nexport type ReactSimpleRendererProps<O extends HTMLElement> = Readonly<{\n  original: O;\n}>;\nexport type WebComponentSimpleRenderer<O extends HTMLElement> = (root: HTMLElement, original: O) => void;\n\nfunction convertSimpleRendererArgs<O extends HTMLElement>([original]: Slice<\n  Parameters<WebComponentSimpleRenderer<O>>,\n  1\n>): PropsWithChildren<ReactSimpleRendererProps<O>> {\n  return { original };\n}\n\nexport function useSimpleRenderer<O extends HTMLElement>(\n  reactRenderer?: ComponentType<ReactSimpleRendererProps<O>> | null,\n  config?: RendererConfig,\n): UseRendererResult<WebComponentSimpleRenderer<O>> {\n  return useRenderer(reactRenderer, convertSimpleRendererArgs, config);\n}\n", "import type { ComponentType, ReactNode } from 'react';\nimport { useRenderer } from './useRenderer.js';\nimport type { RendererConfig, UseRendererResult } from './useRenderer.js';\nimport {\n  type ReactSimpleRendererProps,\n  useSimpleRenderer,\n  type WebComponentSimpleRenderer,\n} from './useSimpleRenderer.js';\n\nexport function useSimpleOrChildrenRenderer<O extends HTMLElement>(\n  fnRenderer?: ComponentType<ReactSimpleRendererProps<O>> | null,\n  children?: ReactNode | ComponentType<ReactSimpleRendererProps<O>>,\n  config?: RendererConfig,\n): UseRendererResult<WebComponentSimpleRenderer<O>> {\n  let _children: ReactNode | undefined;\n  let _fnRenderer: ComponentType<ReactSimpleRendererProps<O>> | null | undefined;\n  let shouldUseSimpleRendererResult = false;\n\n  if (typeof children === 'function') {\n    _children = undefined;\n    _fnRenderer = children;\n    shouldUseSimpleRendererResult = true;\n  } else {\n    _children = children;\n    _fnRenderer = fnRenderer;\n    shouldUseSimpleRendererResult = !!_fnRenderer;\n  }\n\n  const useChildrenRendererResult = useRenderer(_children, undefined, config);\n  const useSimpleRendererResult = useSimpleRenderer(_fnRenderer, config);\n\n  return shouldUseSimpleRendererResult ? useSimpleRendererResult : useChildrenRendererResult;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AACA,IAAAA,gBASO;ACRP,IAAAC,KAAuB;ADFvB,cAAc;ACCd,SAAS,gBAAgBC,UAAgF;;;ACDzG,mBAQO;AACP,uBAAwC;AAQxC,IAAMC,IAAe,oBAAI;AAEzB,SAASC,EACPC,GACA,CAACC,GAAM,GAAGC,EAAI,GAC6B;AAC3C,SAAO,IAAI,IAAIF,CAAK,EAAE,IAAIC,GAAMC,EAA+B;AACjE;AAgBO,SAASC,EACdC,GACAC,GACAC,IACsB;AACtB,QAAM,CAACC,GAAKC,EAAM,QAAIC,aAAAA,YAAsCV,GAAiBD,CAAY,GACnFY,SAAWC,aAAAA,aACd,IAAIT,OAAwB;AAC3B,QAAII,MAAAA,gBAAAA,GAAQ,YAAY;AAKtB,YAAMM,IAAU,WAAW,SACrBC,KAAQD,EAAQ;AACtBA,QAAQ,QAASE,CAAAA,OAAoB;AAC/BA,QAAAA,GAAQ,SAAS,WAAW,KAGhCD,GAAMC,EAAO;MACf,OACAC,iBAAAA,WAAU,MAAMP,GAAON,EAAI,CAAC,GAC5BU,EAAQ,QAAQC;IAClB;AACEL,MAAAA,GAAON,EAAI;EAEf,GACA,CAAC,CACH;AAEA,SAAOE,IACH,CACE,MAAM,KAAKG,EAAI,QAAQ,CAAC,EAAE,IAAI,CAAC,CAACN,IAAMC,CAAI,UACxCc,iBAAAA,cACEX,QACIY,aAAAA,eAAiBb,GAAyCC,EAAQH,CAAI,CAAC,IACtEE,GACLH,EACF,CACF,GACAS,EACF,IACA,CAAC;AACP;;;AC1EA,SAASQ,EAAiD,CAACC,CAAQ,GAGhB;AACjD,SAAO,EAAE,UAAAA,EAAS;AACpB;AAEO,SAASC,EACdC,GACAC,GACkD;AAClD,SAAOC,EAAYF,GAAeH,GAA2BI,CAAM;AACrE;;;ACZO,SAASE,GACdC,IACAC,GACAC,IACkD;AAClD,MAAIC,GACAC,GACAC,KAAgC;AAEhC,SAAOJ,KAAa,cACtBE,IAAY,QACZC,IAAcH,GACdI,KAAgC,SAEhCF,IAAYF,GACZG,IAAcJ,IACdK,KAAgC,CAAC,CAACD;AAGpC,QAAME,KAA4BC,EAAYJ,GAAW,QAAWD,EAAM,GACpEM,KAA0BC,EAAkBL,GAAaF,EAAM;AAErE,SAAOG,KAAgCG,KAA0BF;AACnE;;;AJYI,yBAAA;ACpCJ,IAAMI,IAAS,EAAE,iBAAiB,iBAAiB;AAAnD,IAEaC,IAAeC,EAAgB,EACxC,cAAcC,IAAqB,QAAAH,GAAQ,OAAOI,IAAO,SAAS,sBACtE,CAAC;ADyBD,SAASH,EACP,EAAE,UAAAI,IAAU,GAAGC,EAAM,GACrBC,GACqB;AACrB,MAAM,CAACC,GAASC,CAAQ,IAAIC,GAA4BJ,EAAM,UAAUD,EAAQ;AAEhF,aACEM,mBAAAA,KAACV,GAAA,EAAe,GAAGK,GAAO,KAAKC,GAAK,UAAUE,GAC3C,UAAAD,EAAAA,CACH;AAEJ;AAMA,IAAMI,QAAwBC,cAAAA,YAAWZ,CAAY;AACrDW,EAAsB,OAAOT,GAAoB;",
  "names": ["import_react", "p", "NotificationElement", "initialState", "rendererReducer", "state", "root", "args", "useRenderer", "reactRendererOrNode", "convert", "config", "map", "update", "useReducer", "renderer", "useCallback", "console", "error", "message", "flushSync", "createPortal", "createElement", "convertSimpleRendererArgs", "original", "useSimpleRenderer", "reactRenderer", "config", "useRenderer", "useSimpleOrChildrenRenderer", "fnRenderer", "children", "config", "_children", "_fnRenderer", "shouldUseSimpleRendererResult", "useChildrenRendererResult", "useRenderer", "useSimpleRendererResult", "useSimpleRenderer", "events", "Notification", "createComponent", "NotificationElement", "React", "children", "props", "ref", "portals", "renderer", "useSimpleOrChildrenRenderer", "jsx", "ForwardedNotification", "forwardRef"]
}
